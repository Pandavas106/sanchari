rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Allow authenticated users to read and write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow read access to user's public profile data for community features
      match /public/{document} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Allow authenticated users to read and write their own bookings
    match /bookings/{bookingId} {
      // Allow create if the new data's userId matches the user
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Allow update/delete/read if the existing data's userId matches the user
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Allow authenticated users to read and write their own saved items
    match /savedItems/{itemId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Allow authenticated users to read and write their own cart
    match /carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow authenticated users to read and write their own reviews
    match /reviews/{reviewId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Allow authenticated users to read and write their own notifications
    match /notifications/{notificationId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Allow public read access to destinations, but only authenticated users can write
    match /destinations/{destinationId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Allow authenticated users to read and write their own activities
    match /userActivities/{activityId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // ==================== SHARED TRIPS RULES ====================
    
    // Shared trips - public read access, authenticated users can create/update their own
    match /sharedTrips/{tripId} {
      allow read: if true; // Anyone can read shared trips
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.creatorId &&
                   request.resource.data.isPublic == true; // Only creator can create, must be public
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.creatorId; // Only creator can update their trips
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.creatorId; // Only creator can delete their trips
    }

    // Trip usage tracking - authenticated users can create usage records
    match /tripUsage/{usageId} {
      allow read: if true; // Anyone can read usage statistics
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId; // Only user can create their own usage
      allow update, delete: if request.auth != null && 
                           request.auth.uid == resource.data.userId; // Only user can modify their usage
    }

    // Trip ratings and reviews - part of shared trips but separate for better organization
    match /tripReviews/{reviewId} {
      allow read: if true; // Anyone can read reviews
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId; // Only user can create their own review
      allow update, delete: if request.auth != null && 
                           request.auth.uid == resource.data.userId; // Only user can modify their review
    }

    // User's shared trip collections - for managing user's own shared trips
    match /userSharedTrips/{userId}/trips/{tripId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Trip collaboration - for trips that multiple users can edit
    match /collaborativeTrips/{tripId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.creatorId;
      allow update: if request.auth != null && (
                   request.auth.uid == resource.data.creatorId ||
                   request.auth.uid in resource.data.collaborators
                   );
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.creatorId;
    }

    // Trip comments - for community engagement
    match /tripComments/{commentId} {
      allow read: if true; // Anyone can read comments
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId; // Only user can create their own comment
      allow update, delete: if request.auth != null && 
                           request.auth.uid == resource.data.userId; // Only user can modify their comment
    }

    // Trip likes/favorites - for community engagement
    match /tripLikes/{likeId} {
      allow read: if true; // Anyone can read likes
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId; // Only user can create their own like
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId; // Only user can remove their like
    }

    // Trip reports - for content moderation
    match /tripReports/{reportId} {
      allow read: if request.auth != null; // Only authenticated users can read reports
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.reporterId; // Only user can create their own report
      allow update, delete: if false; // Reports cannot be updated or deleted by users
    }

    // Trip categories and tags - public read, admin write
    match /tripCategories/{categoryId} {
      allow read: if true; // Anyone can read categories
      allow write: if request.auth != null; // Authenticated users can suggest categories
    }

    // Trip analytics - for tracking popular destinations and trends
    match /tripAnalytics/{analyticsId} {
      allow read: if true; // Anyone can read analytics
      allow write: if request.auth != null; // System can update analytics
    }

    // User trip history - for personalized recommendations
    match /userTripHistory/{userId}/history/{historyId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Trip recommendations - AI-generated recommendations
    match /tripRecommendations/{userId}/recommendations/{recommendationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Admin-only collections for content management
    match /adminReviews/{reviewId} {
      allow read, write: if request.auth != null; // For now, allow authenticated users (implement admin check later)
    }

    // Fallback rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
